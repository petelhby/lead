generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String
  role            String
  createdTasks    Task[]      @relation("CreatedTasks")
  assignedTasks   Task[]      @relation("AssignedTasks")
  Project         Project[]
  createdProjects Project[]   @relation("CreatedProjects")
  TaskEntry       TaskEntry[]
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  budget      Float
  status      ProjectStatus @default(IN_PROGRESS)
  deadline    DateTime
  createdBy   User          @relation("CreatedProjects", fields: [createdById], references: [id])
  createdById Int
  tasks       Task[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime      @default(now())
}

model Task {
  id           Int         @id @default(autoincrement())
  title        String
  description  String?
  assignedTo   User?       @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int?
  createdBy    User?       @relation("CreatedTasks", fields: [userId], references: [id])
  userId       Int?
  project      Project     @relation(fields: [projectId], references: [id])
  projectId    Int
  createdAt    DateTime    @default(now())
  dueDate      DateTime
  status       String      @default("Новая")
  entries      TaskEntry[] // ✅ связи с подзаписями
}

model TaskEntry {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  photos    String[] // массив путей к фото
  report    String
}

enum Role {
  ADMIN
  WORKER
}

enum ProjectStatus {
  IN_PROGRESS
  PAUSED
  CLOSED
  PAID
}
